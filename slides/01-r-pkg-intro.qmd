---
title: "How to create and distribute `R` packages"
format: 
  revealjs:
    slide-number: true
    slide-level: 4
---

# Welcome!

Let's introduce ourselves...

::: {.fragment .fade-left}
::: {#fig-team layout-ncol="4"}
![Katie Burak](img/photo_katie.jpg){width=200}

- We're all affiliated to the Department of Statistics at UBC

::: {.fragment .fade-left}
::: {#fig-team layout-ncol="4"}
![Katie Burak, Assistant Professor of Teaching](img/photo_katie.jpg){width=170} 

![Daniel Chen, Postdoctoral Teaching and Learning Fellow](img/photo_daniel.jpg){width=170}

![G. Alexi Rodríguez-Arelis, Assistant Professor of Teaching](img/photo_alexi.jpg){width=170}

![Tiffany Timbers, Associate Professor of Teaching](img/timbers_2021.jpg){width=170}

Teaching Team
:::
:::

![G. Alexi Rodríguez-Arelis](img/photo_alexi.jpg){width=200}

![Tiffany Timbers](img/timbers_2021.jpg){width=200}

Teaching team
:::
:::

# What is an `R` package and when should I make one?

![](img/panda.png){fig-align="center" width=10%}

## This question is key!

::: incremental
- An `R` package is a <span style="color: purple;">collection</span> of functions, tests, data, compiled code, and standardized documentation
- The reason to create a package is mostly about <span style="color: purple;">creating code that should be easier to reuse and share</span>

## More specifically...

- `R` packages are created:
  - When your <span style="color: purple;">DRY</span> ("Do Not Repeat Yourself) radar goes off
  - When you think your code has general usefulness others could benefit from (this could include future you)
  - When you want to <span style="color: purple;">share</span> data (R packages in particular are used quite heavily for this)

. . .

> **Source:** Lecture notes from [UBC's **DSCI 310** course (Reproducible and Trustworthy Workflows for Data Science)](https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/materials/lectures/10-packaging-and-documenting.html#when-to-start-writing-an-r-or-python-package)
:::

## Let's start with a motivating example

::: incremental
- Suppose that, <span style="color: purple;">in many of your analyses</span>, you find yourself repeatedly coding the distribution of observations over the classes (i.e., categories) of a given variable in your dataset
- You find yourself rewriting code, copying and pasting code and/or copying and pasting files containing the code to do this. And in doing so, you sometimes (or often!) make trivial mistakes.
- You wonder whether others doing similar analyses face this problem as well, and want to share your (eventual) solution with others.
:::

## Counting observations across classes code example

- The code below is counting how many cars in `mtcars` (composed of 32 observations) have `4`, `6`, and `8` cylinders

. . .

```{r}
#| echo: true
#| code-line-numbers: "|3|4|5|6"
library(tidyverse, quietly = TRUE)

mtcars |>
  group_by(cyl) |>
  summarize(count = n()) |>
  rename("class" = cyl)
```

## Is an `R` package the answer to our pains with how we have been previously trying to reuse our code?

## Yes, it is!

::: incremental
Packaging our code:
- allows us to more easily reuse the in many different projects, in a less error-prone way
- let's others benefit from the code we have written
- increases our code quality because when packaging we:
     - must modularize our code into functions and write function reference documentation
     - have our code organized in a way that works well with tools for creating tutorials/vignettes, as well as formal code/software testing to ensure our code works as expected)
:::

![](img/software.png){fig-align="center" width=5%}

## How are `R` packages shared and downloaded?

- `R` packages can be shared and downloaded using code repositories, like GitHub 
- We also have the [**Comprehensive R Archive Network (CRAN)**](https://cran.r-project.org)

- We have the [**Comprehensive R Archive Network (CRAN)**](https://cran.r-project.org)

. . .

> *CRAN is a network of ftp and web servers around the world that store identical, up-to-date, versions of code and documentation for `R`.*

. . .

- As of today, there are over <span style="color: purple;">20,000 packages available</span> on the CRAN

## What will be our learning goals?
- As of today, there are over <span style="color: purple;">20,000 packages available</span> on the CRAN

## What will be the workshop topics?
::: incremental
- Develop `R` packages from scratch via a <span style="color: purple;">toy example</span>
- Introduce the concept of <span style="color: purple;">testing</span> to ensure our package coding works as expected
- Include the corresponding <span style="color: purple;">documentation</span>
- Introduce <span style="color: purple;">continuous integration</span> using <span style="color: purple;">GitHub Actions</span>
- Share and publish packages on <span style="color: purple;">GitHub</span> and <span style="color: purple;">CRAN</span> 
- Define <span style="color: purple;">copyright rules</span> when building, sharing, and using packages
- Choose the most appropriate <span style="color: purple;">license</span>
:::